"""
@authors: Kfir Ram, Hen Dahan, Shir Bar
@date: 30.6.2021
"""

import os
import sqlite3
import urllib
from urllib.request import urlopen
import re
from openpyxl import load_workbook


# This function invert the hash map from (event ID: [TTPs]) to (TTP: [event IDs])
def invert_malware_hash_map(mitre_hash_map):
    new_dic = {}
    for k, v in mitre_hash_map.items():
        for x in v:
            if '-' not in x:
                new_dic.setdefault(int(x), []).append(k)
    return new_dic


def save_malware_to_db(malware_hashmap):
    conn = sqlite3.connect("Databases/Malware.db")
    cur = conn.cursor()

    if os.path.exists("Databases/Malware.db"):
        drop = "DROP TABLE IF EXISTS malware"
        cur.execute(drop)

    create = "CREATE TABLE IF NOT EXISTS malware( event_id INT, ttp TEXT);"
    cur.execute(create)  # execute SQL commands
    conn.commit()

    malware_data = malware_hashmap
    malware_data = [(int(i), str(malware_data[i])) for i in malware_data]
    insert_command = "INSERT INTO malware VALUES(?,?);"

    cur.executemany(insert_command, malware_data)
    conn.commit()


# this function print the data inside Malware.db
def show_db():
    conn = sqlite3.connect("Databases/Malware.db")
    cur = conn.cursor()
    cur.execute("SELECT name FROM sqlite_master WHERE type='table';")  # show all the tables in the .db file
    print("Malware.db__________________________________________________________________________________")
    print(cur.fetchall())
    cur.execute("SELECT * FROM Malware")  # show all the data inside Malware table/
    print(cur.fetchall())
    names = list(map(lambda x: x[0], cur.description))  # show all the columns names
    print(names)
    print("Malware.db_end______________________________________________________________________________")


# This function extract only the event IDs from a string, using a regular expressions library,
# returns a list of event IDs
def extract_event_id_from_str(string):
    return re.findall('[\d]*[-][\d]+|[\d]+[.\d]+', string)


# This function get the hash map of Malware and save it to the db
def get_malware_hash_map():
    # download
    url = "https://raw.github.com/MalwareArchaeology/ATTACK/6da9ffb897e40e83d3ddd8a995f8af9a0044caca/Windows_Logging_Attack_Matrix_Win_Events_Sept_2018.xlsx"
    urllib.request.urlretrieve(url, 'WindowsMalware.xlsx')

    # Open Malware Archaeology excels sheet file
    workbook = load_workbook(filename="WindowsMalware.xlsx")
    sheet = workbook["Win_Logging_Basic"]

    # initialize sheet values that are necessary for create the hashmap
    rowsNum = sheet.max_row
    columnsNum = sheet.max_column
    Green_Hex = "FF92D050"
    Yellow_Hex = "FFFFFF00"

    # Create a malware HashMap
    malware_hashmap = {}

    # Run on the cells in the sheet for creating the hashmap
    for i in range(6, rowsNum):
        Tactic = sheet.cell(i, 4).value
        for j in range(5, columnsNum):
            cellColor = str(sheet.cell(i, j).fill.start_color.index)
            if cellColor == Green_Hex or cellColor == Yellow_Hex:
                cell = str(sheet.cell(i, j).value)
                eventIDs = extract_event_id_from_str(cell)
                malware_hashmap[Tactic] = eventIDs
            else:
                continue
    invertHashMap = invert_malware_hash_map(malware_hashmap)
    return invertHashMap


# This function get the hash map of Malware from the db
def get_malware_archaeology_hashmap_from_db():
    malware_hashmap = {}
    if not os.path.exists("Databases/Malware.db"):
        get_malware_hash_map()
    try:
        sqliteConnection = sqlite3.connect("Databases/Malware.db")
        cursor = sqliteConnection.cursor()
        sqlite_select_Query = "select event_id, ttp from malware"
        cursor.execute(sqlite_select_Query)
        record = cursor.fetchall()
        for rec in record:
            if rec[0] in malware_hashmap.keys():
                malware_hashmap[int(rec[0])].append(rec[1])
            else:
                # print(rec[0])
                malware_hashmap[int(rec[0])] = [rec[1]]
        cursor.close()
        sqliteConnection.close()
        return malware_hashmap
    except sqlite3.Error as error:
        print("error while connecting to sqlite ", error)


# this function compere the old list from the db with new one from the internet
# return true if update is needed else return false
def check_for_update():
    local_list = get_malware_archaeology_hashmap_from_db()
    foreign_list = get_malware_hash_map()
    need_update = False
    for item in local_list:
        if item not in foreign_list:
            need_update = True
    if need_update:
        save_malware_to_db(foreign_list)
    return need_update
